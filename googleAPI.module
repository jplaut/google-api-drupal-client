<?php
/*
Copyright (c) 2012-2013 Jon Plaut

* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.

* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

require_once("google-api-php-client/apiClient.php");
require_once("google-api-php-client/contrib/apiAnalyticsService.php");

define("SCOPE", "https://www.googleapis.com/auth/analytics.readonly");

/*
* Authenticates a client using different methods. Returns authenticated client.
*/

class AuthenticatedClient {
	public $authMethod;
	public $client;
	
	public function __construct($client, $authMethod) {
		$this->client = $client;
		$this->authMethod = $authMethod;
		
		return call_user_func(array('self', $this->authMethod));
	}
	
	/*
	* Authenticates a client using a valid refresh token and saves the variables
	* to the database. Returns authenticated client, or Null if unsuccessful.
	*/
	public function refresh_token() {
		$this->client -> setClientId(variable_get("googleApiClientId", ""));
		$this->client -> setClientSecret(variable_get("googleApiClientSecret", ""));
		$this->client -> refreshToken(variable_get('googleApiRefreshToken', ""));
		
		try{
			self::set_google_api_variables($this->client);
			return $this->client;
		}
		catch (Exception $e) {
			return Null;
		}
	}
	
	/*
	* Authenticates a client using Client ID and Client Secret and saves the variables
	* to the database. Returns authenticated client, or Null if unsuccessful.
	*/
	public function full_auth() {
		$this->client -> setClientId(variable_get("googleApiClientId", ""));
		$this->client -> setClientSecret(variable_get("googleApiClientSecret", ""));
		$this->client -> setRedirectUri(get_current_url());
		$this->client -> setScopes(SCOPE);
	
		$this->client -> authenticate();
		
		try{
			self::set_google_api_variables($this->client);
			return $this->client;
		}
		catch (Exception $e) {
			return Null;
		}
	}
	
	/*
	* Authenticates a client using a valid access token and returns authenticated client, 
	* or Null if unsuccessful.
	*/
	public function access_token() {
		try {
			$this->client -> setAccessToken(variable_get("googleApiFullResponse", ""));
			return $this->client;
		}
		catch (Exception $e) {
			return Null;
		}
	}
	
	/*
	* Save returned access token to database
	*/
	public function set_google_api_variables() {
		$tokenJSON = json_decode($this->client -> getAccessToken(), true);
		
		variable_set("googleApiFullResponse", $this->client -> getAccessToken());
		variable_set("googleApiAccessToken", $tokenJSON['access_token']);
		variable_set("googleApiTokenExpires", $tokenJSON['created'] + $tokenJSON['expires_in']);
		
		if ($tokenJSON['refresh_token']) {
			variable_set("googleApiRefreshToken", $tokenJSON['refresh_token']);
		}
	}
}

/*
* Query Google for Analytics profiles and formats them for use in 
* config form
*/
function get_profiles($service) {
	$profiles = $service->management_profiles->listManagementProfiles("~all", "~all", array('fields' => "items(id,name)"));
	$profileList = array();
	foreach ($profiles['items'] as $profile) {
		$profileList[$profile['id']] = $profile['name'];
	}
	
	return $profileList;
}

/*
* Returns current URL
*/
function get_current_url() {
	$s = empty($_SERVER["HTTPS"]) ? '' : ($_SERVER["HTTPS"] == "on") ? "s" : "";
	$protocol = substr(strtolower($_SERVER["SERVER_PROTOCOL"]), 0, strpos(strtolower($_SERVER["SERVER_PROTOCOL"]), "/")) . $s;
	$port = ($_SERVER["SERVER_PORT"] == 80) ? "" : (":" . $_SERVER["SERVER_PORT"]);
	$requestURI = explode("?", $_SERVER["REQUEST_URI"]);
	return $protocol . "://" . $_SERVER["SERVER_NAME"] . $port . $requestURI[0];
}

/*
* Implementation of hook_help
*/
function googleAPI_help($path, $arg) {
	$output = '';
	
	switch($path) {
		case "admin/help#googleAPI":
			$output = '<p>' . t("Helps integrate Drupal sites with the Google API.");
			break;
	}
	return $output;
}

/*
* GoogleAPI configuration page
*/
function googleAPI_config($form) {
	
	$form = array();
	$client = new apiClient();
	$service = new apiAnalyticsService($client);
	

	// Add standard form elements
	$form['googleApiClientId'] = array(
		'#type' => 'textfield',
		'#title' => t('Client ID'),
		'#default_value' => variable_get('googleApiClientId', ''),
		'#size' => 30,
		'#description' => t('Client ID created for the app in the Google API Console'),
	);

	$form['googleApiClientSecret'] = array(
		'#type' => 'textfield',
		'#title' => t('Client Secret'),
		'#default_value' => variable_get('googleApiClientSecret', ''),
		'#size' => 30,
		'#description' => t('Client Secret created for the app in the Google API Console'),
	);
	
	if (!variable_get("googleApiAccessToken", "") || !variable_get("googleApiRefreshToken", "")) {
		if ($_GET['code']) {
			// If there is no access token or refresh token and client is returned
			// to the config page with an access code, complete the authentication
			
			$client = new AuthenticatedClient($client, 'full_auth');
			
			if ($client) {
				// If authentication was successful, display list of profiles on config page
				$profiles = get_profiles($service);
				
				$form['googleAnalyticsProfile'] = array(
					'#type' => 'select',
					'#title' => 'Select a profile: ',
					'#options' => $profiles,
					'#default_value' => variable_get('googleAnalyticsProfile', ""),
				);	
				
				$form['save'] = array(
					'#type' => 'submit',
					'#value' => 'Save',
					'#submit' => array('googleAPI_config_save'),
				);
				$form['deauth'] = array(
					'#type' => 'submit',
					'#value' => 'Deauthenticate',
					'#submit' => array('googleAPI_config_deauth'),
				);
				
				drupal_set_message(t("Authentication successful."));
			} else {
				// If authentication fails, throw an error
				form_set_error('', t("Authentication failed. Please check Client ID and Client Secret."));
			}
		} else {
			// If there is no access token or refresh token and there is no
			// access code, do nothing
			$form['auth'] = array(
				'#type' => 'submit',
				'#value' => 'Authenticate',
				'#submit' => array('googleAPI_config_auth'),
				);
			}
	} else {
		if (variable_get("googleApiTokenExpires", "") < time()) {
			// If the site has an access token and refresh token, but the
			// refresh token has expired, authenticate the user with the
			// refresh token 
			$client = new AuthenticatedClient($client, 'refresh_token');
		} else {
			// If the access token is still valid, authenticate the user with that
			$client = new AuthenticatedClient($client, 'access_token');
		}
		
		if ($client) {
			// If authentication was successful, display profiles on the
			// configuration page
			$profiles = get_profiles($service);
			
			$form['googleAnalyticsProfile'] = array(
				'#type' => 'select',
				'#title' => 'Select a profile: ',
				'#options' => $profiles,
				'#default_value' => variable_get('googleAnalyticsProfile', ""),
			);
			
			$form['save'] = array(
				'#type' => 'submit',
				'#value' => 'Save',
				'#submit' => array('googleAPI_config_save'),
			);
			$form['deauth'] = array(
				'#type' => 'submit',
				'#value' => 'Deauthenticate',
				'#submit' => array('googleAPI_config_deauth'),
			);
		} else {
			// If authentication fails, throw an error.
			form_set_error('', t("Authentication failed. Please check Client ID and Client Secret."));
		}
	}
	
	return $form;
}

/*
* Validate the configuration form. If Client ID or Client Secret
* are not filled in, throw an error.
*/
function googleAPI_config_validate($form, &$form_state) {
	if (!$form_state['values']['googleApiClientId'] || !$form_state['values']['googleApiClientSecret']) {
		form_set_error('', t('You must enter a valid client ID and client Secret.'));
	}
}

/*
* Begins authentication process. 
* Performed when the first time the user requests authentication
*/
function googleAPI_config_auth($form, &$form_state) {
	variable_set("googleApiClientId", $form_state['values']['googleApiClientId']);
	variable_set("googleApiClientSecret", $form_state['values']['googleApiClientSecret']);
	
	$client = new apiClient();
	$client = new AuthenticatedClient($client, 'full_auth');
	
	echo "Hello";
}

/*
* Unsets all googleApi variables.
* Performed when a user hits "Deauthenticate" on the config page
*/ 
function googleAPI_config_deauth($form, &$form_state) {
	variable_del("googleApiClientId");
	variable_del("googleApiClientSecret");
	variable_del("googleApiAccessToken");
	variable_del("googleApiRefreshToken");
	variable_del("googleApiTokenExpire");
	variable_del("googleApiFullResponse");
	variable_del("googleAnalyticsProfile");
	
	drupal_set_message("Site successfully deauthenticated.");
}

/*
* Saves googleApi config settings.
* Performed when user is authenticated and hits "Save" on the config form
*/
function googleAPI_config_save($form, &$form_state) {
	if ($form_state['values']['googleApiClientId'] != variable_get("googleApiClientId", "") || $form_state['values']['googleApiClientSecret'] != variable_get("googleApiClientSecret", "")) {
		variable_set("googleApiClientId", $form_state['values']['googleApiClientId']);
		variable_set("googleApiClientSecret", $form_state['values']['googleApiClientSecret']);
		googleAPI_config_auth($form, $form_state);
	}
	
	variable_set("googleAnalyticsProfile", $form_state['values']['googleAnalyticsProfile']);
	
	drupal_set_message("Settings saved.");
}

/*
* Implements hook_menu
*/
function googleAPI_menu() {
	$items = array();
	
	$items['siteAnalytics'] = array(
		'title' => 'Site Analytics',
		'page callback' => 'googleAPI_all',
		'access arguments' => array('access googleAPI content'),
		'weight' => 9,
		'type' => MENU_NORMAL_ITEM,
	);
	
	$items['admin/settings/googleAPI'] = array(
		'title' => t('Google API Settings'),
		'description' => t('Google API configuration page'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('googleAPI_config'),
		'access arguments' => array('access googleAPI content'),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}

/*
* Called when user accesses the "Site Analytics" page.
* Displays Google Analytics data.
*/
function googleAPI_all() {
	$output = "";
	$client = new apiClient();
	$service = new apiAnalyticsService($client);
	
	if (variable_get('googleApiAccessToken', '')) {
		if (variable_get('googleApiTokenExpires', '') < time()) {
			// If the client has been authenticated, but the token is expired,
			// fetch a new token
			$client = new AuthenticatedClient($client, 'refresh_token');
		} else {
			// If the client has been authenticated and possesses a valid
			// access token, authenticate with that token
			$client = new AuthenticatedClient($client, 'access_token');
		}

		if ($client) {
			//If authentication was successful, display Google Analytics data
			$data = $service->data_ga->get(
				'ga:' . variable_get("googleAnalyticsProfile", ""),
				'2005-01-01',
				date('Y-m-d'),
				'ga:visits,ga:pageviews',
				array(
					'fields' => 'totalsForAllResults',
				)
			);
			foreach ($data as $elem) {
				$output .= "<li>Visits: " . $elem['ga:visits'] . "</li><li>Page Views: " . $elem['ga:pageviews'] . "</li>";
			}
		} else {
			// If authentication failed, throw an error.
			$output .= "<p>Google API authentication failed. Please " . l('configure Google API', 'admin/settings/googleAPI') . ".</p>";
		}
		
	} else {
		// If user is not authenticated, send user to GoogleAPI config page
		$output .= "<p>Please " . l('configure Google API', 'admin/settings/googleAPI') . ".</p>";
	}
	
	return $output;
}